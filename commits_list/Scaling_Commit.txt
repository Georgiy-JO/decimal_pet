Commit <Scaling done> 
(╯°□°）╯︵ ┻━┻

I. File-Folder structure:
	arithmetic
          └ s21_arithmetic.h
          └ s21_scaling.c
        bit_operations (rename)
          └ s21_bit_operations.h
          └ s21_bit_operations.c
        comparison
          └ s21_comparison.h
          └ s21_basic_comparison.c
        converters
          └ s21_converters.h
          └ s21_basic_comparison.c
        massive_decimal
          └ s21_massive_decimal.h
          └ s21_massive_decimal_bit.c
        service_functions
          └ s21_service_functions.h
          └ s21_error_handler.c
        simple_arithmetic
          └ s21_simple_arithmetic.h
          └ s21_simple_arithmetic.c
        tests
          └ s21_inside_tests.c
          └ s21_test.c

II. Make file and project building update.
	1) all object files and executable goes to <build/>.
	2) have stage to compile and build currently written functions and tests for them.
	3) previous structure of the make file saved, new lines under  <#JO temp test stages------...> line. 
	
III. New structure:　struct s21_expended_decimal s21_expended
	A) Expended decimal (mantissa x2+1 + sign);
	B) bits[0](mantissa_1) | bits[1](mantissa_2) | bits[2](mantissa_3) | bits[2](mantissa_3) | bits[3](mantissa_4) | bits[4](mantissa_5) | bits[5](mantissa_6) | bits[6](mantissa_7 + sign);			
	C) [00000000 00000000 00000000 00000000][00000000 00000000 00000000 00000000][00000000 00000000 00000000 00000000][00000000 00000000 00000000 00000000][00000000 00000000 00000000 00000000][00000000 00000000 00000000 00000000][s0000000 00000000 00000000 0000000m]  -- s - sign symbol m - last mantissa symbol; 
	D) it is described in s21_massive_decimal.h with some constants that are used in associated functions (located in different .c files).
	
IV. Functions from old branches: 
	A) s21_getBit; s21_getBitGlobal; s21_setBit; s21_setBitGlobal; 
	B) s21_getSign; s21_setSign; s21_invertSign; 
	C) s21_setScale; s21_zeroScale; s21_getScale; s21_increseScaleUlt; s21_increseScale; s21_decreseScale; s21_decreseScaleUlt;
	D) s21_setPartMantissa; s21_getPartMantissa; 
	E) s21_clearDecimal; s21_copyDecimal; 
	F) s21_leftShift32; s21_leftShift; s21_rightShift32; s21_rightShift;  
	G) s21_printDecimalBinRev; s21_printDecimalBin.
	
VI. New functions list:
	A) bit_operations/s21_bit_operations.c:
		1) void s21_printDecimalBinReal (s21_decimal num) -- print decimal number how it placed in massive;
		2) int s21_mantissaLength(s21_decimal num)  -- calculate the length of mantissa (aka the first <1> position+1).
	B) arithmetic/s21_scaling.c:
		1) int s21_rankOfNumber (s21_decimal num) -- return how big the number is in a terms of ranks;
		2) int s21_singleScaleChange(s21_decimal *num, int add_scale) -- changes the scale of a decimal (if the adding scale is positive returns the delta of input scale and possible scale);
		3) s21_decimal s21_simpleSingleScale(s21_decimal num, int new_scale) -- scale a decimal (give it a NEW scale), but only if the new scale is right (not overflow) -- not used;
    	4) s21_decimal s21_simpleSingleScaleAdd(s21_decimal num, int add_scale) -- re-scale a decimal by ADDing scale, but only if the adding scale is right (no overflow), adding sacale can de negative though); 
		5) void s21_scaling (s21_decimal* num1, s21_decimal* num2) -- the main scaling function (make 2 decimals same scale);
		6) int s21_singleScaleChangeIncr(s21_decimal *num, int add_scale) -- changes the scale of a decimal if the adding scale is positive, return the delta of input scale and possible scale;
		7) int s21_singleScaleChangeDecr(s21_decimal *num, int add_scale) -- changes the scale of a decimal if the adding scale is negative (if the scale is too big, I will dismantle part of the number).
	C) comparison/s21_basic_comparison.c:
		1) int s21_bitsCompare (unsigned int num1,unsigned int num2) -- compare 2 received bits ([-1 == <] ; [0 == =] ; [1 == >]);
		2) int s21_decimalCompare (s21_decimal num1, s21_decimal num2) -- compare 2 received decimals ([-1 == <] ; [0 == =] ; [1 == >]).
		3) int s21_expendedCompare (s21_expended num1, s21_expended num2); -- compare 2 received expended ([-1 == <] ; [0 == =] ; [1 == >]).
	D) converters/s21_basic_comparison.c:
		1) s21_decimal s21_simpleIntToDec (int num) -- converts input int to decimal (-5 == 5);
		2) s21_decimal s21_simpleUIntToDec (unsigned int num) -- converts input unsigned int to decimal;
		3) s21_decimal s21_takeLastExpToDec (s21_expended num) -- converts expended to decimal, by taking only last 3 bytes (num.bits) and the sign;
		4) s21_expended s21_decToExp (s21_decimal num) -- converts decimal to expended (keeping sign too).
	E) massive_decimal/s21_massive_decimal_bit.c:
		1) void s21_copyExpended(s21_expended src, s21_expended* dest); -- copy src expended to dest expended;               
		2) void s21_clearExpended(s21_expended* expended); -- clear the expended == ZERO everything;
		3) char s21_setBitGlobalExp(s21_expended* number, int index, char val); -- set bit in the expended;
		4) char s21_getBitGlobalExp (s21_expended number, int index); -- get bit from the expended;
		5) void s21_printExpendedMantissa(s21_expended dec); -- print the mantissa part of the expended;
		6) void s21_printExpendedBin(s21_expended dec); -- print full expended;
		7) char s21_getSignExp(s21_expended number); -- get sign from the expended;
		8) char s21_setSignExp(s21_expended* number, char val); -- set sign of the expended;
		9) void s21_invertSignExp(s21_expended* number); -- invert the sign of the expended (1->0; 0->1);
		10) void s21_leftShiftExp32 (s21_expended* num, int shift); -- shift left service functions for the expended; 
		11) void s21_leftShiftExp (s21_expended* num, int shift); -- shift the expended left;
		12) void s21_rightShiftExp32 (s21_expended* num, int shift); -- shift right service functions for the expended;
		13) void s21_rightShiftExp (s21_expended* num, int shift); -- shift the expended right.
		14) int s21_mantissaExpLength(s21_expended num);  -- calculate the length of mantissa (aka the biggest <1> position+1).
	F) service_functions/s21_error_handler.c:
		1) char s21_getErrorbit (s21_decimal num); -- check if error bit is true (there was an error) -- error bit is the firs bit of significant;
		2) void s21_setErrorbit (s21_decimal* num); -- set the error bit as true (there was an error);
		3) void s21_resetErrorbit (s21_decimal* num); -- set the error bit as false (there was no error).
	G) simple_arithmetic/s21_simple_arithmetic.c:
		1) s21_decimal s21_simpleAddition (s21_decimal num1, s21_decimal num2) -- decimal + decimal (does not work with signs and scale and overflow);
		2) s21_expended s21_simpleAdditionExp (s21_expended num1, s21_expended num2) -- expended + expended (does not work with signs and scale);
		3) s21_decimal s21_simpleSubstraction (s21_decimal num1, s21_decimal num2) -- decimal - decimal (does not work with signs and scale (but can do a-b if a<b));
		4) s21_expended s21_simpleSubstractionExp (s21_expended num1, s21_expended num2) -- expended - expended (does not work with signs and scale (but can do a-b if a<b));
		5) s21_expended s21_simpleDecMultiplicationExpOut (s21_decimal number1, s21_decimal number2)  -- expended * expended, done with Booth’s Algorithm (does not work with signs and scale);
		6) s21_decimal s21_simpleDecMultiplication (s21_decimal num1, s21_decimal num2)  -- decimal * decimal (does not work with signs and scale and overflow (won't tell if overflow));
		7) s21_decimal s21_simpleIntMultiplication (s21_decimal num1, int num2) -- decimal * int (does not work with signs and scale and overflow (won't tell if overflow));
		8) s21_decimal s21_simpleDecIntagerDevision(s21_decimal dividend, s21_decimal devider) -- dividend = divider*result + reminder, but does not return reminder (does not work with signs and scale(+ return errorcode if devided by zero));
		9) s21_decimal s21_simpleDecIntagerDevisionRemainder (s21_decimal dividend, s21_decimal devider, s21_decimal* reminder) -- dividend = divider*result + reminder (does not work with signs and scale (+ return errorcode if devided by zero))  -- more tests required; 
		10) s21_decimal s21_simpleIntIntagerDevision (s21_decimal dividend, int devider) --  same as previous but decimal / int (does not work with signs and scale).
	
VII. File <s21_inside_tests.c> includes tests for all functions from (III) and (IV)  -- <make rebuild_inside_test>  or  <make inside_test>

VIII. Bug fix in:
	A) int s21_leftShift(s21_decimal* dec, int shift)
	B) int s21_rightShift(s21_decimal* dec, int shift)
	
IX. PS. the scaling function cat numbers if it is needed for the scaling reason, it does not round them the right way - just ca t that part that does not fit.

-JGeorgiy-JO (aka. riderkri)